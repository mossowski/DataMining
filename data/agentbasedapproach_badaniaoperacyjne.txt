The paper proposes a variant of the A-Team architecture called PLA-Team. An A-Team is a problem solving architecture in which the agents are autonomous and co-operate by modifying one another's trial solutions. A PLA-Team differs from other A-Teams with respect to strategy of generating and destroying solutions kept in the common memory. The proposed PLA-Team performance is evaluated basing on computational experiments involving benchmark instances of two well known combinatorial optimization problems - flow shop and job-shop scheduling. Solutions generated by the PLA-Team are compared with those produced by state-of-the-arts algorithms.

Recently, a number of agent-based approaches have been proposed to solve different types of optimization problems. 
One of the successful approaches to agent-based optimization is the concept of A-Teams. An A-Team is composed of simple agents that demonstrate complex collective behavior.

The A-Team architecture was originally developed by Talukdar \cite{Talu}.  A-Teams have proven to be successful in addressing hard optimization problems where no dominant algorithm exists. Within the A-Team multiple agents achieve an implicit cooperation by sharing a population of solutions. The design of the A-Team architecture was motivated by other architectures used for optimization including blackboard systems and genetic algorithms. In fact, the A-Team infrastructure could be used to implement most aspects of these other architectures. The advantage of the A-Team architecture is that it combines a population of solutions with domain specific algorithms and limited agent interaction. In addition, rich solution evaluation metrics tend to result in a more diverse set of solutions \cite{Rac}.

According to \cite{Talu}  an A-Team is a problem solving architecture in which the agents are autonomous and co-operate by modifying one another's trial solutions. These solutions circulate  continually. An A-Team can be also defined as a set of agents and a set of memories, forming a network in which every agent is in a closed loop.

An asynchronous team (A-Team) is a strongly cyclic computational network. Results are circulated through this network by software agents. The number of agents can be arbitrarily large and the agents may be distributed over an arbitrarily wide area. Agents cooperate by working on one another's results. Each agent is completely autonomous (it decides which results it is going to work on and when). Results that are not being worked on accumulate in common memories to form populations. Randomization (the effects of chance) and destruction (the elimination of weak results) play key roles in determining what happens to the populations. 

A-Team architecture allows a lot of freedom with respect to designing procedures for communication between agents and shared  memories as well as creation and removal of individuals (solution) from common memories. 
In this paper an approach to construct a team of agents, further on referred to as a PLA-Team, is proposed and validated. The approach makes use of the  idea which has been conceived for the population learning algorithm. 
An effective search for a solution of computationally hard problems requires a cocktail of methods applied to a population of solutions, 
with more advanced procedures being applied only to more promising population members. Designing and implementing a PLA-Team is seen as an extension of the range of available agent-based optimization tools. 

In Section 2 of the paper, a PLA-Team architecture is described and some details of the proposed approach are given. In Sections 3 and 4 experiment results are reported. The approach has been used to solve benchmark instances of the two well known and difficult combinatorial problems: the flow shop and job-shop scheduling. The solutions obtained by the proposed PLA-Team are compared with the performance of state-of-the-art algorithms including parallel ones. The conclusions contain an evaluation of the proposed approach and some suggestions for future research.