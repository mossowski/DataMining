The paper proposes the implementation of  population learning algorithm (PLA) for solving three well-known NP-hard permutation-scheduling problems. PLA is a recently developed method belonging to the class of the population-based algorithms. One of possible applications of the PLA is solving difficult optimization problems. The first of the discussed problems involves scheduling tasks on a single machine against common due date with earliness and tardiness penalties. The second is known as the permutation flow shop problem. The third one involves scheduling tasks on a single machine with total weighted tardiness as a criterion. To evaluate the proposed implementations computational experiments have been carried. They involved solving available sets of benchmark problems and comparing the results with the optimum or best-known solutions.  PLA has found better upper bounds on several benchmark instances. Experiments have also helped to identify some behavioral characteristics of the proposed algorithms.

Population learning algorithm (PLA), proposed by P. Jędrzejowicz in [12], is a population-based method, which can be applied to solve combinatorial optimization problems. In this paper an experimental evaluation of several implementations of the PLA applied to permutation scheduling is presented.
Permutation scheduling problems are defined as scheduling problems where the solution is a permutation of tasks or jobs to be processed on one or more machines (processors). In the paper three permutation scheduling problems are considered – common due date, permutation flow shop and a single machine weighted tardiness.
Common due date problems with earliness and tardiness penalties are of importance in logistic systems with just-in-time production and delivery. Applications of the problem were discussed by Kanet [15], Hall and Posner [9], Hoogeveen and Van De Velde [10], and later Lee [17], studied properties and complexity of the common due date problem. Both cases i.e. scheduling with restrictive and unrestrictive due dates are known to be NP-hard. It is suspected that the general problem with a restrictive or unrestrictive common due-date is NP-hard in the strong sense. This, however, is still an open question [1]. 
In a permutation flow shop each machine processes the jobs in the same order [2]. While the machine sequence of all jobs is the same, the problem is to find a job sequence which minimizes the makespan, i.e. the maximum of the completion times of all tasks. It is well known that the problem is NP-hard [7]. 
Total weighted tardiness problem where jobs are to be processes on a single machine with a view to minimize sum of penalties for being tardy, has been shown to be NP-hard in [4]. 
In view of the complexity of permutation scheduling problems several authors have proposed various approximation algorithms. For example, several heuristic and metaheuristic algorithms solving the common due dates scheduling problems were proposed in [5], [11], [17]. In case of the permutation flow shop some example heuristic and metaheuristic solutions were discussed by Taillard [22], Tian and others [24], and Reeves [20]. Local search heuristics for the single machine total weighted tardiness scheduling problem were discussed by Crauwels and others [3].
The paper proposes applying a population learning algorithm to obtain solutions to all three problem types instances. It is shown that the approach is effective and promising, moreover, in numerous instances it has been possible to improve previously announced upper bounds for benchmark problems. Earlier versions of the proposed permutation scheduling algorithms and some experiment results reported in this paper were already presented in [13] and [14].
The paper is organized as follows. Problem formulation and a short description of the population learning algorithm are given in Sections 2 and 3, respectively. Several implementations of the population learning algorithm developed to solve common due date,  permutation flow shop and total weighted tardiness scheduling problems are discussed in Section 4. Computational experiment results and comparison with benchmark problem solutions are shown in Section 5. Section 6 discusses some behavioural characteristics of the PLA implementations identified experimentally. Conclusions include some suggestions for future research.