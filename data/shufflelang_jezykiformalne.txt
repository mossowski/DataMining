In this paper we show that shuffle languages
are contained in {\bf one-way-NSPACE(logn)} thus in {\bf P}.
We consider the class of shuffle languages which emerges from the class
of finite languages through regular operations (union, concatenation, Kleene star)
and shuffle operations (shuffle and shuffle closure).
For every shuffle expression $E$ we construct a shuffle automaton
which accepts the language generated by $E$ and we show that the
automaton can be simulated by a one-way
nondeterministic Turing machine in logarithmic space.

The operations shuffle and shuffle closure have been introduced 
to describe sequentialized execution histories of concurrent processes
(\cite{Rid}, \cite{Sh}).
Together with other operations they describe various classes of languages
 which have been extensively studied (see
\cite{Garg}, \cite{Gis}, \cite{Jantzen1},
 \cite{Jantzen2}, \cite{JJ1}, \cite{JJ2}, \cite{War}).
Here, we consider the class of shuffle languages which emerges from the class
of finite languages through regular operations (union, concatenation, Kleene star)
and shuffle operations (shuffle and shuffle closure).


It was  known that shuffle languages are properly contained
in the class of context-sensitive languages
 and not comparable with the class of context-free languages.
The complexity of the shuffle operation was discussed in
\cite{Jantzen2},
\cite{MS},
\cite{Og},
and \cite{War}. In \cite{Jantzen2} it was shown that the class of extended
regular languages, ER, which is an extension of regular languages by the
shuffle closure operator only, is contained in
 {\bf NSPACE}(logn) and in {\bf P}.
 On the other hand, in \cite{War} it was shown that the language
$\{ab^ncde^nf:n\geq 0\}^\otimes$ is {\bf NP}-complete,
and also the problem of deciding for a sequence of words
$t, u_1,\,\dots\,u_m$ whether $t\in u_1\odot u_2\dots\odot u_m$
or the problem of deciding for a pair of words $t$ and $v$ whether
$t\in v^\otimes$ are {\bf NP}-complete
($\odot$ and $\otimes$ are shuffle and shuffle closure operators).

The aim of this paper is to show that
%the class of
shuffle languages
are contained in one-way-NSPACE(logn) thus in  P(see \cite{Hop}).
Observe that
the class  of shuffle languages can only form a proper subclass of
one-way-NSPACE(logn)
since $\{a^nb^n: n\geq 1 \}$ is not a shuffle language (\cite{JJ1}). Besides,
neither  one-way-NSPACE(logn) nor NSPACE(logn) is closed under shuffle
closure, unless {\bf P=NP}.
This follows from the just mentioned fact that the language
$\{ab^ncde^nf:n\geq 0\}^\otimes$ is {\bf NP}-complete.


To prove our result we introduce a new tool
 - shuffle automata,
 % useful in our investigation,
which on one hand accept shuffle languages
and on the other hand they can be simulated by one way nondeterministic
Turing machines in logarithmic space.
%The class of shuffle automata is defined in the following way:
For every shuffle expression $E$ we construct a shuffle automaton $A_E$
which
accepts
the language generated by $E$ and we show that
the automaton can be simulated by a one-way nondeterministic
Turing machine in logarithmic space. We use the Turing machine model
with one-way read-only input tape and a separate two-way read-write work
tape. Only $\log n$  cells of work tape can be used during computations.

The paper is organized as follows. In Section 2 we recall the notion of a
shuffle expression and a shuffle language, and we introduce shuffle
automata.
For every shuffle expression $E$ we construct a shuffle automaton $A_E$
and define the computation
with distinguishable markers. In Section 3 we prove that the language
accepted by $A_E$ is equal to the language generated by $E$.
In Section 4 for the automaton $A_E$ we define a finite set of types of
markers and introduce a computation with nondistinguishable markers.
We do not distinguish markers of the same type and only have to remember
the number of markers of each type.
This kind of computation is more economical in terms of computational
complexity.
In Section 5 we show that
computations with distinguishable and nondistinguishable markers
are equivalent. Finally in Section 6 we show that computations with
nondistinguishable markers can be simulated by a one-way
Turing machine with logarithmic space.